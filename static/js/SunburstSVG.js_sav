var taxTreeJson = "../../docs/"+$('#username').attr("value")+"/"+
  $('#open-file').attr("value")+"_tree.json";

var width = 1000,
    height = 1000,
    duration = 600,
    radius = Math.min(width,height)/2,
    maxShowDepth = 1000,
    maxDepth = 0,
    currentDepth = 0;

var formatNumber = d3.format(",d")

var x = d3.scale.linear()
    .range([0,2*Math.PI]);
var y = d3.scale.sqrt()
    .range([0,radius]);

var color = d3.scale.category20c();

var svg = d3.select("#chart").append("div")
    .classed("svg-container",true)
  .append("svg")
    .classed("sunburst-svg",true)
    .attr("preserveAspectRatio","xMinYMin meet")
    .attr("viewBox","0 0 "+width+" "+height)
  .append("g")
    .attr("transform", "translate(" + width / 2 + "," + (height / 2) + ")");

/*
svg.append("rect")
    .attr("width", "100%")
    .attr("height", "100%")
    .attr("fill", "gray")
    .attr("transform", "translate(" + -width / 2 + "," + (-height / 2) + ")");;
*/     
var partition = d3.layout.partition()
    .value(function(d) { return d.size; });

var arc = d3.svg.arc()
    .startAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x))); })
    .endAngle(function(d) { return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))); })
    .innerRadius(function(d) { return Math.max(0, y(d.y)*scaleArcRadius(d)); })
    .outerRadius(function(d) { return Math.max(0, y(d.y + d.dy)*scaleArcRadius(d)); });
    
d3.json(taxTreeJson, function(error, root) {
    if (error) throw error;

    filterByAbundance(root,root.size);    
    partition.nodes(root);
    accordianData(root,null);
    startColors(root);
    assignColor(root);
    findMaxDepth(root);
    
    var g1 = svg.selectAll("path")
        .data(partition.nodes(root))
      .enter().append('g');
      
    var g2 = svg.selectAll("path")
        .data(partition.nodes(root))
      .enter().append('g');
      
    var path = g1.append("path")
        .attr("d", arc)
        .style("fill", function(d) { return d.color; })
        .on("click", click)
      
    var titles = path.append("title")
        .text(function(d) { return d.name + "\n" + formatNumber(d.value); });
        
    var text = g2.append("text")
        .style("font-size", "13px")
        .attr("class","label")
        .attr("x", function(d) { return d.x; })
         // Rotate around the center of the text, not the bottom left corner
        .attr("text-anchor", SetTextAnchor)
         // First translate to the desired point and set the rotation
        .attr("transform", function(d) { return "translate(" + arc.centroid(d) + ")" + "rotate(" + getAngle(d) + ")"; })                       
        .attr("dx", "0") // margin
        .attr("dy", function (d) {
            if (d.children) {
                return "0em";
            } else {
                return ".35em";
            }
        }) // vertical-align
        .text(SetTextText)
        .attr("pointer-events","none");
            
    function SetTextAnchor(d) {
        //console.log(d);
        if (d.children) {
            //console.log("middle");
            return "middle";
        } else {
            if (arc.centroid(d)[0] >= 0) {
                //console.log("start");
                return "start";
            } else {
                //console.log("end");
                return "end";
            }            
        }
    }  
         
    function SetTextText(d) {
        //console.log(d);
        if (d.children) {
            if ((arc.endAngle()(d) - arc.startAngle()(d)) > 0.5) {
                if (d.depth <= currentDepth + 2) {
                    return d.name;
                } else {
                    return null;
                }
            } else {
                return null;
            }
        } else {
            if ((arc.endAngle()(d) - arc.startAngle()(d)) > 0.05) {
                return d.name
            } else {
                return null
            }
        }
    }       
                
    function getAngle(d) {
        if (d.children) {
            var thetaDeg = (180 / Math.PI * (arc.startAngle()(d) + arc.endAngle()(d)) / 2 );
            return (thetaDeg > 90 && thetaDeg < 280) ? thetaDeg - 180 : thetaDeg;
        } else {
            var thetaDeg = (180 / Math.PI * (arc.startAngle()(d) + arc.endAngle()(d)) / 2 - 90);
            return (thetaDeg > 90) ? thetaDeg - 180 : thetaDeg;        
        }

    }

    function click(d) {
        currentDepth = d.depth;
        var trans = svg.transition()
            .duration(duration)
            .tween("scale", function() {
                var xd = d3.interpolate(x.domain(), [d.x, d.x + d.dx]),
                    yd = d3.interpolate(y.domain(), [d.y, 1]),
                    yr = d3.interpolate(y.range(), [d.y ? 20 : 0, radius]);
                return function(t) { x.domain(xd(t)); y.domain(yd(t)).range(yr(t)); };
            })
            
        trans.selectAll("path")
            .attrTween("d", function(d) { return function() { return arc(d); }; });

        trans.selectAll('.label')
            .attrTween("transform", function(d) { return function () {
                return "translate(" + arc.centroid(d) + ")" + "rotate(" + getAngle(d) + ")";}})
            .attrTween("text-anchor", function(d) { return function () { return SetTextAnchor(d)}})
            .tween("text", function(d) { 
                return function() {
                    if (d.children) {
                        if ((arc.endAngle()(d) - arc.startAngle()(d)) > 0.5) {
                            if (currentDepth-1 <= d.depth && d.depth <= currentDepth + 2) {
                                this.textContent = d.name;
                            } else {
                                this.textContent =  null;
                            }
                        } else {
                            this.textContent =  null;
                        }
                    } else {
                        if ((arc.endAngle()(d) - arc.startAngle()(d)) > 0.05) {
                            this.textContent =  d.name;
                        } else {
                            this.textContent =  null;
                        }
                    }
                }
            });
      updateTable(tableRoot,getDisplayedTaxIds(d))
    }
});
    

function filterByAbundance(d,maxVal) {
    if (d.children) {
        var i = d.children.length
        while (i--) {
            if (d.children[i].size/maxVal < 0.0001) {
                d.children.splice(i,1);
            } else {
                filterByAbundance(d.children[i],maxVal);
            }
        }
    }

}

function getDisplayedTaxIds (d) {
    var taxIds = [];
    getTaxIdsFromTree(d);
    return taxIds;
    function getTaxIdsFromTree(d) {
        taxIds.push(d.taxId);
        if (d.children) {
            d.children.forEach( function(child) {
                getTaxIdsFromTree(child);
            });
        }
    }
}

function findMaxDepth(d) {
    if (d.depth > maxDepth) {
        maxDepth = d.depth;
    }
    if (d.children) {
        d.children.forEach(findMaxDepth);
    }
}

function startColors(d) {
    var colors = ["51,204,51",
                  "0,102,255",
                  "255,80,80",
                  "153,153,102",
                  "102,0,255"];
    d.color = "rgb(100,100,100)";
    for (var i=0; i < d.children.length; i++) {
        d.children[i].color = "rgb("+colors[i]+")";
    }
}

function assignColor(d) {
    if (!d.color) {
        //console.log(d);
        var colors = d.parent.color.substring(4,d.parent.color.length-1);
        colors = colors.split(",");
        for (var i=0; i < colors.length; i++) {
            colors[i] = parseInt(colors[i]);
            if (Math.random() < 0.5) {
                if (colors[i] <= 240) {
                    colors[i] += 15;
                }
            } else {
                if (colors[i] >= 15) {
                    colors[i] -= 15;
                }
            }
        }
        var newColors = "rgb("+colors[0]+","+colors[1]+","+colors[2]+")";
        d.color = newColors
    }
    if (d.children) {
        d.children.forEach(assignColor);
    }
}

function scaleArcRadius(d) {
    if (d.depth > maxShowDepth+currentDepth) {
        return 0
    } else {
        return 0.8
    }
}

d3.select(self.frameElement).style("height", height + "px");

function accordianData (d,startParent) {
    if (startParent !== null)  {
        if (!d.children) {
            if ((d.depth - startParent.depth) > 3) {
                startParent.children[0]._accordian = startParent.children[0].children
                startParent.children[0].children = [d]
                startParent.children[0].name = startParent.children[0].name + "..." + d.parent.name;
                d.parent = startParent.children[0]
            }
        } else if (d.children.length == 1) {
            accordianData(d.children[0],startParent);
        } else if (d.children.length > 1) {
            for (var i=0; i < d.children.length; i++) {
                accordianData(d.children[i],null)
            }
            if ((d.depth - startParent.depth) > 3) {
                startParent.children[0]._accordian = startParent.children[0].children
                startParent.children[0].children = [d]
                startParent.children[0].name = startParent.children[0].name + "..." + d.parent.name;
                d.parent = startParent.children[0]
            }
        }
    } else if (startParent == null && d.children) {
        if (d.children.length == 1 ) {
            accordianData(d.children[0],d)
        } else { 
            for (var i=0; i < d.children.length; i++) {
                accordianData(d.children[i],null)
            }
        }    
    }
}

/*
!!!!!BUILD TAXA TABLE!!!!
*/

var margin = {top: 30, right: 20, bottom: 30, left: 20},
    tableWidth = 500 - margin.left - margin.right,
    tableHeight = 1000,
    barHeight = 40,
    barWidth = tableWidth * 1;

var i = 0,
    tableRoot;

var tableSvg = d3.select("#taxaTable").append("div")
    .classed("svg-container",true)
  .append("svg")
    .classed("table-svg",true)
    .attr("preserveAspectRatio","xMinYMin meet")
    .attr("viewBox","0 0 "+tableWidth+" "+tableHeight)
    
var tableCanvas = tableSvg.append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");


/*tableSvg.append("rect")
    .attr("width", "100%")
    .attr("height", "100%")
    .attr("fill", "gray")*/

taxaReport = '../../docs/'+$('#username').attr('value')+'/'+
                $('#open-file').attr('value')+'_topTenTaxa1.json';

var tableDuration = 500;

d3.json(taxaReport, function(error, flare) {
    if (error) throw error;
    tableRoot = flare;
    tableRoot.sort(function(a,b) {return b['count'] - a['count']})
    updateTable(tableRoot);
});

function updateTable(source,taxaList=[]) {
    function color(d) {
        return "#3182bd" ;//: d.genes ? "#c6dbef" : "#fd8d3c";
    }
    
    function opacity(d) {
        return d.display ? 1:1e-6;
    }

    function computeBarWidth(d) {
        return ((d.count/maxCount) * barWidth)+(barWidth*0.02);
    }
    var maxCount = 0;
    
    if (taxaList.length > 0) {
        maxCount = 0
        source.forEach( function(d) {
            if ($.inArray(d.taxId,taxaList) != -1) {
                if (d.count > maxCount) {
                    maxCount = d.count;
                }
                d.display = true;
            } else {
                d.display = false;
            }
          
        });
    } else {
        source.forEach( function(d) {
            if (d.count > maxCount) {
                maxCount = d.count;
            }
            d.display = true;
        });
    }
    
    var x0 = 0,
        y0 = 0,
        padding = 1,
        shownGenes = [];
        
    //compute new positions
    source.forEach( function(d) {
        if (d.display == true) {
            d.x = x0;
            d.y = y0;
            y0 += barHeight+padding;
        } else {
            d.x = -barWidth*2;
            d.y = y0;
        }
    });

    var tableHeight = y0 + margin.top + margin.bottom;
    
    tableSvg.transition()
        .duration(duration)
        .attr("viewBox","0 0 "+tableWidth+" "+tableHeight)

    d3.select(self.frameElement).transition()
        .duration(duration)
        .style("height", tableHeight + "px");

    var taxa = tableSvg.selectAll(".taxon")
        .data(source);
                
    var taxaEnter = taxa.enter()
        .append("g")
        .classed("taxon",true)
        .attr("transform",function(d) {return "translate(0,0)"})
        .style("opacity",1e-6)
        .on("click", function(d) {clickTable(d);})
        .on("mouseover", function() {
          d3.select(this).select("rect").style("fill","#999999");
        })
        .on("mouseout", function() {
          d3.select(this).select("rect").style("fill",color);
        });
        
    var taxaRect = taxaEnter.append("rect")
        .classed("taxonRect",true)
        .attr("height", barHeight)
        .attr("width", computeBarWidth)
        .style("fill", color);
        
    var taxaText = taxaEnter.append("text")
        .attr("dy", 25)
        .attr("dx", 5.5)
        .text(function(d) { 
            if(d.name.length > 70) {
                return d.name.substring(0,67)+"...";
            } else {
                return d.name;
            }
        })
        .style("cursor","default")
      

    // Transition nodes to their new position.
    taxaEnter.transition()
        .duration(tableDuration)
        .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
        .style("opacity", opacity);

    taxa.transition()
        .duration(tableDuration)
        .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
        .style("opacity", opacity)
        .select("rect")
        .style("fill", color)
        .attr("width", computeBarWidth);

}

function clickTable(d,startPos=0) {
    $('#geneTabs li:eq(0) a').tab('show');
    $('#coverageSvg').empty()
    $('#coverageTitle').html("No gene selected");
    $('.getGeneName').unbind('click');
    $('.getCoverage').unbind('click');
    $('#forwardGenes').unbind('click');
    $('#reverseGenes').unbind('click');
    tableDiv = ""
    var passData = d;
    var offset = 20;
    $('.navigateGenes').addClass("disabled")
    setTimeout(function() {$('.navigateGenes').removeClass("disabled");},500)
    $('#forwardGenes').on('click', function(passData) {clickTable(d,startPos+offset);});
    $('#reverseGenes').on('click', function(passData) {clickTable(d,startPos-offset);});
    
    allSeqIds = []
    
    d.genes.sort(function(a,b) {return b['count'] - a['count']})
    
    d.genes.forEach( function(gene) {
        allSeqIds.push(gene.geneId)
    });
    
    if (d.genes.length < startPos+offset) {
        var endPos = d.genes.length;
        $('#forwardGenes').prop("disabled",true);
    } else {
        var endPos = startPos+offset;
        $('#forwardGenes').prop("disabled",false);
    }
    
    if (startPos==0) {
        $('#reverseGenes').prop("disabled",true);
    } else {
        $('#reverseGenes').prop("disabled",false);
    }
    
    for (var j=startPos; j<endPos; j++) {
        tableDiv += '<tr>';
        tableDiv += '<td>'+(j+1)+'</td>';
        tableDiv += '<td class="geneName" id="'+d.genes[j]['geneId']+'">Loading...</td>';
        tableDiv += '<td><button type="button" class="btn btn-secondary btn-xs getCoverage" value="'+d.genes[j]['geneId']+'">Show Coverage</button></td>';
        tableDiv += '<td>'+d.genes[j]['geneId']+"</td>";
        tableDiv += '<td>'+d.genes[j]['count']+"</td>";
        tableDiv += '</tr>';
    }
    
    getAllGeneNames(allSeqIds.slice(startPos,endPos));
    
    
    $('#geneTableBody').html(tableDiv);
    $('#taxonModalTitle').html(d.name)
    $('#taxonModal').modal('show');
    
    $('.getGeneName').click(function(e) {
        var cell = $(this);
        var seqId = this.value;
        $('.getGeneName').prop("disabled",true);
          
        var geneName = ""
        var base = 'http://eutils.ncbi.nlm.nih.gov/entrez/eutils/';
        var extras = '&tool=TaxAssessor&email=jallison_at_colostate.edu'
    
        if (seqId.indexOf('.') === -1) {
            var url = base + "efetch.fcgi?db=nucleotide&id="+seqId+"&rettype=docsum&retmode=json" + extras;
            $.ajax({
                type: 'GET',
                url: url,
                dataType: 'json',
                success: function(data) {
                    cell.replaceWith(data['result'][seqId]['title']);
                },
                error: function(xhr, status, error) {
                    var err = eval("(" + xhr.responseText + ")");
                    alert(err.Message);
                },
                complete: setTimeout(function() {
                    $('.getGeneName').prop("disabled",false);                  
                },1000)
            });
        }
    });
    
    $('.getCoverage').click(function(e) {
        $('#coverageSvg').empty()
        var seqId = this.value;
        var formData = new FormData($("#get_coverage")[0]);
        formData.append('seqId',this.value);
        $.ajax({
            type: 'POST',
            data: formData,
            dataType: 'json',
            contentType:false,
            processData:false,
            cache:false,
            url: '/getCoverage',
            success: function(coverageData) {
                getNcbiCoverageInfo(seqId,coverageData);
            },
            error: function(xhr, status, error) {
                var err = eval("(" + xhr.responseText + ")");
                alert(err.Message);
            },
        });    
      
    }) 
}

function getAllGeneNames(allSeqIds) {
    var base = 'http://eutils.ncbi.nlm.nih.gov/entrez/eutils/';
    var extras = '&tool=TaxAssessor&email=jallison_at_colostate.edu'
    var url = base + "efetch.fcgi?db=nucleotide&id="+allSeqIds+"&rettype=docsum&retmode=json" + extras;
    $.ajax({
        type: 'GET',
        url: url,
        dataType: 'json',
        success: function(data) {
            console.log(data);
            data["result"]["uids"].forEach( function(d) {
                
                $('#'+d).html(data["result"][d]["title"]);
            });
        },
        error: function(xhr, status, error) {
            var err = eval("(" + xhr.responseText + ")");
            alert(err.Message);
            console.log(err);
        },
        complete: removeUnknownNames
    });
    function removeUnknownNames() {
        $('.geneName').each( function(d) {
            if ($(this).html() == "Loading...") {
                $(this).html("Name unknown");
            }
        });
    }
}


function getNcbiCoverageInfo(seqId,coverageData) {

    $('.getGeneName').prop("disabled",true);
          
    var geneName = ""
    var base = 'http://eutils.ncbi.nlm.nih.gov/entrez/eutils/';
    var extras = '&tool=TaxAssessor&email=jallison_at_colostate.edu'
    
    if (seqId.indexOf('.') === -1) {
        
        var url = base + "efetch.fcgi?db=nucleotide&id="+seqId+"&rettype=docsum&retmode=json" + extras;
        $.ajax({
            type: 'GET',
            url: url,
            dataType: 'json',
            success: function(ncbiData) {
                createCoverageChart(seqId,coverageData,ncbiData)
            },
            error: function(xhr, status, error) {
                var err = eval("(" + xhr.responseText + ")");
                alert(err.Message);
            },
            complete: setTimeout(function() {
                $('.getGeneName').prop("disabled",false);                  
            },1000)
        });
    }
}

function createCoverageChart(seqId,coverageData,ncbiData) {  

    var ncbiStats = ncbiData['result'][seqId]['statistics'],
        ncbiTitle = ncbiData['result'][seqId]['title'];
    $('#coverageTitle').html("Coverage Report For: "+ncbiTitle)
    var seqLength = 0
    for (var i=0; i<ncbiStats.length; i++) {
        if (ncbiStats[i].hasOwnProperty('type')) {
            if (ncbiStats[i]['type'] === "Length") {
                seqLength = ncbiStats[i]['count'];
            }
        }
    }
    if (seqLength == 0) {
        seqLength = coverageData.endPos;
    }
    var data = coverageData.coverageData;
    console.log(coverageData);
    
    var xdata = coverageData.positions,
        ydata = coverageData.coverage;
        
    if (xdata[0] != 0) {
        xdata.unshift(0);
        ydata.unshift(0);
    }
    
    if (xdata[xdata.length-1] != seqLength) {
        xdata.push(seqLength);
        ydata.push(0);
    }
        
        
    for (var i=0; i<xdata.length; i++) {
        xdata[i] = +xdata[i];
        ydata[i] = +ydata[i];
    }
   
    var margin = {top: 20, right: 20, bottom: 30, left: 50},
        width = 1000 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

    var xScale = d3.scale.linear()
        .domain([0,seqLength])
        .range([0, width]);

    var yScale = d3.scale.linear()
        .domain([0,d3.max(ydata)])
        .range([height, 0]);

    var xAxis = d3.svg.axis()
        .scale(xScale)
        .orient("bottom");

    var yAxis = d3.svg.axis()
        .scale(yScale)
        .orient("left");

    var line = function(xdata,ydata) {
        return d3.svg.line()
                 .x(function(d,i) { return xScale(xdata[i]); })
                 .y(function(d,i) { return yScale(ydata[i]); })
                 (Array(xdata.length));
    }

    var svg = d3.select('#coverageSvg')
      .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
 
    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis)
      .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", 6)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .text("Coverage");

    svg.append("path")
        .attr("class", "line")
        .attr("d", line(xdata,ydata))
        .style("stroke", "steelblue" )
        .attr('fill', 'none');
              
    $('#coverageSvg').show();
    $('#geneTabs li:eq(1) a').tab('show');
}

